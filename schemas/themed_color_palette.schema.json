{
  "$defs": {
    // The brightness type.
    "brightness": {
      "enum": [
        "dark",
        "light"
      ]
    },
    // The color hex code string.
    "color": {
      "pattern": "^[a-fA-F0-9]{8}$",
      "type": "string"
    },
    // The different font weight values.
    "fontWeight": {
      "enum": [
        "100",
        "thin",
        "200",
        "extraLight",
        "300",
        "light",
        "400",
        "medium",
        "500",
        "normal",
        "regular",
        "plain",
        "600",
        "semiBold",
        "700",
        "bold",
        "800",
        "extraBold",
        "900",
        "black"
      ]
    },
    // A camel case string.
    "camelCase": {
      "type": "string",
      "pattern": "^[a-z][a-zA-Z0-9]*$"
    },
    // A regular expression to match the import
    "importRegExp": {
      "type": "string",
      "pattern": "^(\\.shared.|)[a-z]([a-zA-Z0-9]|\\.)*$"
    },
    ".deprecated": {
      "description": "If specified, the value will have a `@Deprecated` decorator with the given deprecation message.",
      "type": "string"
    },
    ".description": {
      "description": "The description of the object. This will be used in the generated documentation in the code.",
      "type": "string"
    },
    ".flutter": {
      "description": "If specified, the generated property will be private. So you can use it to create the flutter theme. But it won't be accessible in the code.",
      "type": "string"
    },
    ".platforms": {
      "description": "The platforms the item will be accessible on. By default, the item will be accessible on all the platforms of the parent. The root item is available on all platforms by default.",
      "items": {
        "$ref": "#/$defs/camelCase",
        "type": "string",
        "uniqueItems": true
      },
      "type": "array"
    },
    "importedValue": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "import": {
          "description": "Imports a value.\n\nYou can only import values that have been defined before/above in the file.\nTo import a shared value, use the following syntax: `import: .shared.collectionName.valueName`.\nTo import a themed value, use the following syntax: `import: collectionName.valueName`",
          "$ref": "#/$defs/importRegExp"
        }
      }
    },
    "importedColor": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "value": {
          "description": "The color value.\nThe value should have the format `aarrggbb`.\n\nIf you want to import a color, use the `import` property.",
          "$ref": "#/$defs/color"
        },
        "import": {
          "description": "Imports a color.\n\nYou can only import colors that have been defined before/above in the file.\nTo import a shared value, use the following syntax: `import: .shared.collectionName.valueName`.\nTo import a themed value, use the following syntax: `import: collectionName.valueName`",
          "$ref": "#/$defs/importRegExp"
        },
        "withOpacity": {
          "description": "If specified, the imported color's opacity will be overridden. You can either specify the opacity directly (between 0 and 1) or import an value created above in the file.",
          "oneOf": [
            {
              "maximum": 1,
              "minimum": 0,
              "type": "number"
            },
            {
              "$ref": "#/$defs/importedValue"
            }
          ]
        }
      }
    },
    ".type": {
      "description": "The type of the object.",
      "enum": [
        "int",
        "double",
        "color",
        "fontWeight",
        "bool",
        "brightness"
      ]
    },
    "sharedCollection": {
      "description": "A collection of shared values.",
      "additionalProperties": false,
      "properties": {
        ".deprecated": {
          "$ref": "#/$defs/.deprecated"
        },
        ".description": {
          "$ref": "#/$defs/.description"
        },
        ".flutter": {
          "$ref": "#/$defs/.flutter"
        },
        ".platforms": {
          "$ref": "#/$defs/.platforms"
        }
      },
      "patternProperties": {
        "^[a-z][a-zA-Z0-9]*$": {
          "oneOf": [
            {
              "$ref": "#/$defs/sharedItem"
            },
            {
              "$ref": "#/$defs/sharedCollection"
            }
          ]
        }
      },
      "type": "object"
    },
    "sharedItem": {
      "required": [
        ".type",
        ".value"
      ],
      "oneOf": [
        {
          "properties": {
            ".type": {
              "const": "double"
            },
            ".value": {
              "oneOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/importedValue"
                }
              ]
            }
          }
        },
        {
          "properties": {
            ".type": {
              "const": "int"
            },
            ".value": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/$defs/importedValue"
                }
              ]
            }
          }
        },
        {
          "properties": {
            ".type": {
              "const": "color"
            },
            ".value": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color"
                },
                {
                  "$ref": "#/$defs/importedColor"
                }
              ]
            }
          }
        },
        {
          "properties": {
            ".type": {
              "const": "fontWeight"
            },
            ".value": {
              "oneOf": [
                {
                  "#ref": "#/$defs/fontWeight"
                },
                {
                  "$ref": "#/$defs/importedValue"
                }
              ]
            }
          }
        },
        {
          "properties": {
            ".type": {
              "const": "bool"
            },
            ".value": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/importedValue"
                }
              ]
            }
          }
        },
        {
          "properties": {
            ".type": {
              "const": "brightness"
            },
            ".value": {
              "oneOf": [
                {
                  "$ref": "#/$defs/brightness"
                },
                {
                  "$ref": "#/$defs/importedValue"
                }
              ]
            }
          }
        }
      ],
      "properties": {
        ".deprecated": {
          "$ref": "#/$defs/.deprecated"
        },
        ".description": {
          "$ref": "#/$defs/.description"
        },
        ".flutter": {
          "$ref": "#/$defs/.flutter"
        },
        ".platforms": {
          "$ref": "#/$defs/.platforms"
        },
        ".type": {
          "$ref": "#/$defs/.type"
        },
        ".value": {
          "description": "The value of the shared object."
        }
      },
      "description": "A shared item.\n\nImport this item by using the `import` keyword with the path to this item prefixed with `.shared.`.",
      "type": "object"
    },
    "themedItem": {
      "description": "An item that is depend of the theme. \n\nThe default theme must **ALWAYS** be specified.\nIf a theme is omitted, the default theme's value/logic will be used.\n\nImport this item by using the `import` keyword with the path to this item.",
      "additionalProperties": false,
      "type": "object",
      "oneOf": [
        {
          "properties": {
            ".type": {
              "const": "double"
            }
          },
          "patternProperties": {
            "^[a-z][a-zA-Z0-9]*$": {
              "oneOf": [
                {
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/importedValue"
                }
              ]
            }
          }
        },
        {
          "properties": {
            ".type": {
              "const": "int"
            }
          },
          "patternProperties": {
            "^[a-z][a-zA-Z0-9]*$": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "$ref": "#/$defs/importedValue"
                }
              ]
            }
          }
        },
        {
          "properties": {
            ".type": {
              "const": "color"
            }
          },
          "patternProperties": {
            "^[a-z][a-zA-Z0-9]*$": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color"
                },
                {
                  "$ref": "#/$defs/importedColor"
                }
              ]
            }
          }
        },
        {
          "properties": {
            ".type": {
              "const": "fontWeight"
            }
          },
          "patternProperties": {
            "^[a-z][a-zA-Z0-9]*$": {
              "oneOf": [
                {
                  "#ref": "#/$defs/fontWeight"
                },
                {
                  "$ref": "#/$defs/importedValue"
                }
              ]
            }
          }
        },
        {
          "properties": {
            ".type": {
              "const": "bool"
            }
          },
          "patternProperties": {
            "^[a-z][a-zA-Z0-9]*$": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/importedValue"
                }
              ]
            }
          }
        },
        {
          "properties": {
            ".type": {
              "const": "brightness"
            }
          },
          "patternProperties": {
            "^[a-z][a-zA-Z0-9]*$": {
              "oneOf": [
                {
                  "description": "bbbb",
                  "$ref": "#/$defs/brightness"
                },
                {
                  "description": "imported",
                  "$ref": "#/$defs/importedValue"
                }
              ]
            }
          }
        }
      ],
      "properties": {
        ".deprecated": {
          "$ref": "#/$defs/.deprecated"
        },
        ".description": {
          "$ref": "#/$defs/.description"
        },
        ".flutter": {
          "$ref": "#/$defs/.flutter"
        },
        ".platforms": {
          "$ref": "#/$defs/.platforms"
        },
        ".type": {
          "$ref": "#/$defs/.type"
        }
      },
      "patternProperties": {
        "^[a-z][a-zA-Z0-9]*$": {
          "description": "The value of the item for the given theme.\n\nThe default theme must **ALWAYS** be specified.\nIf a theme is omitted, the default theme's value/logic will be used."
        }
      },
      "required": [
        ".type"
      ]
    },
    "themedCollection": {
      "description": "A collection of themed values.\nYou can import the themed values by using the `import` keyword and the path to the imported value.",
      "additionalProperties": false,
      "properties": {
        ".deprecated": {
          "$ref": "#/$defs/.deprecated"
        },
        ".description": {
          "$ref": "#/$defs/.description"
        },
        ".flutter": {
          "$ref": "#/$defs/.flutter"
        },
        ".platforms": {
          "$ref": "#/$defs/.platforms"
        }
      },
      "patternProperties": {
        "^[a-z][a-zA-Z0-9]*$": {
          "oneOf": [
            {
              "$ref": "#/$defs/themedItem"
            },
            {
              "$ref": "#/$defs/themedCollection"
            }
          ]
        }
      },
      "type": "object"
    }
  },
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "description": "The schema of the yaml theme.",
  "properties": {
    ".description": {
      "$ref": "#/$defs/.description"
    },
    ".name": {
      "description": "The name of the main class created by the code generation that will contain all the properties of themed color palette.",
      "pattern": "^[a-z][a-zA-Z0-9]*$",
      "type": "string"
    },
    ".platforms": {
      "items": {
        "description": "The different platforms that the theme is available on.",
        "pattern": "^[a-z][a-zA-Z0-9]*$",
        "type": "string",
        "uniqueItems": true
      },
      "minItems": 1,
      "type": "array",
      "uniqueItems": true
    },
    ".shared": {
      "description": "Themed values are values that change between the different themes.\n\nTo import those values, you need to prefix the import with `.shared`",
      "$ref": "#/$defs/sharedCollection"
    },
    ".themed": {
      "description": "The themed values are dependant of the theme. The default theme must **ALWAYS** be specified. If a non-default theme is not specify, the value/import logic of the default theme will be reused.\n\nTo import those values, you **don't** need to prefix the import with `.themed`. Directly use the name of the property.",
      "$ref": "#/$defs/themedCollection"
    },
    ".themes": {
      "description": "The list of themes that are supported. The first one is the default theme and needs to be specified in each and every themed objects. If a theme is not specified for an object, it will use the value/logic of the default theme.",
      "items": {
        "pattern": "^[a-z][a-zA-Z0-9]*$",
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "object",
            "patternProperties": {
              "^[a-z][a-zA-Z0-9]*$": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "import": {
                    "description": "Theme to base this theme on.\n\nIf the current theme doesn't have a value specified, it will fall back to the imported theme.\nBy default, the imported theme is the default theme (the first theme in the list of the themes).",
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "uniqueItems": true
      },
      "type": "array"
    },
    ".version": {
      "default": "1.0.0",
      "description": "The version of the theme",
      "type": "string"
    }
  },
  "required": [
    ".themes",
    ".themed",
    ".name"
  ],
  "title": "Yaml theme schema",
  "type": "object"
}
